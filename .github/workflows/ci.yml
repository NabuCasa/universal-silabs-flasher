name: CI

on:
  push:
  pull_request: ~

env:
  CACHE_VERSION: 1
  DEFAULT_PYTHON: 3.9.15
  PRE_COMMIT_HOME: ~/.cache/pre-commit
  PYTHON_MODULE_NAME: universal_silabs_flasher

jobs:
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: |
            base-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -U pip wheel setuptools pre-commit
          pip install -e '.[testing]'

  pre-commit:
    name: Run pre-commit
    runs-on: ubuntu-latest
    needs: prepare-base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: ${{ env.PRE_COMMIT_HOME }}
          key: |
            base-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -U pip wheel setuptools pre-commit
          pip install -e '.[testing]'

      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          pre-commit install-hooks

      - name: Run pre-commit
        run: |
          . venv/bin/activate
          pre-commit run --show-diff-on-failure --color=always

  pytest:
    runs-on: ubuntu-latest
    needs: prepare-base
    name: Run tests
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: |
            base-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1

      - name: Register Python problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/python.json"

      - name: Run pytest
        run: |
          . venv/bin/activate
          pytest \
            -qq \
            --durations=10 \
            --cov ${{ env.PYTHON_MODULE_NAME }} \
            -o console_output_style=count \
            -p no:sugar \
            tests

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ env.DEFAULT_PYTHON }}
          path: .coverage

  coverage:
    name: Process test coverage
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: |
            base-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3

      - name: Combine coverage results
        run: |
          . venv/bin/activate
          coverage combine coverage*/.coverage*
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
